/*  Author: Ahmad Saleh
    <gen> tag means this lines will generated by our custom generator
*/

#include "HLS/hls.h"
#include "HLS/stdio.h"

//<gen>
#define TUPLE_SIZE 4
#define SELECTION_SIZE 2
#define SELECTION_FIELD_0 0
#define SELECTION_FIELD_1 1
//</gen>

struct Tuple {
    bool valid;
    int data[TUPLE_SIZE];
};

struct SelectionResult {
    bool valid;
    int data[SELECTION_SIZE];
};


component void selection(
                        ihc::stream_in<Tuple> &stream_in_tuple, 
                        ihc::stream_out<SelectionResult> &stream_out_selection_out 
) {

    Tuple tuple = stream_in_tuple.read();
    SelectionResult result;
    result.valid = tuple.valid;

    //<gen> gen directives
#ifdef SELECTION_FIELD_0
    result.data[0] = tuple.data[0];
#endif
#ifdef SELECTION_FIELD_1
    result.data[1] = tuple.data[1];
#endif
#ifdef SELECTION_FIELD_2
    result.data[2] = tuple.data[2];
#endif
#ifdef SELECTION_FIELD_3
    result.data[3] = tuple.data[3];
#endif 
    //</gen>


    stream_out_selection_out.write(result);

    return;
}

component void projection(
                        ihc::stream_in<Tuple> &stream_in_tuple,  
                          
                        ihc::stream_out<Tuple> &stream_out_tuple
) {

        
    Tuple tuple = stream_in_tuple.read();

    if (!tuple.valid){
        stream_out_tuple.write(tuple);
        return;
    }


    //<gen>
    int left_hand_cond = (tuple.data[0] + tuple.data[1]) * 10;
    int right_hand_cond = 2000;
    bool projection_result = left_hand_cond < right_hand_cond;
    // </gen>

    tuple.valid = projection_result;
    stream_out_tuple.write(tuple);

    return;
}

// component void windowing (
//                             ihc::stream_in<bool> &valid_in,
//                             ihc::stream_in<bool> &eos_in,
                            
// ) {

// }


int main() {

    ihc::stream_in<Tuple> stream_in;
    ihc::stream_out<Tuple> stream_out;
    Tuple tuple;
    Tuple result;
    tuple.valid = true;
    tuple.data[0] = 2;
    tuple.data[1] = 30;
    tuple.data[2] = 7;
    tuple.data[3] = 8;

    stream_in.write(tuple);
    projection(stream_in, stream_out);

    result = stream_out.read();
    if (result.valid) {
        printf("accepted \n");
    }     
    else {
        printf("rejected \n");
    }

    return 0;

}



